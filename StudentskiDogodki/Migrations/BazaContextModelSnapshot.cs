// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentskiDogodki.Pages;

#nullable disable

namespace StudentskiDogodki.Migrations
{
    [DbContext(typeof(BazaContext))]
    partial class BazaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.13");

            modelBuilder.Entity("StudentskiDogodki.Pages.Dogodek", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("TEXT");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Lokacija")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nastopajoci")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PotDoNaslovnce")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Dogodki");
                });

            modelBuilder.Entity("StudentskiDogodki.Pages.Fotografija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DogodekId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PotDoFotografije")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DogodekId");

                    b.ToTable("Fotografije");
                });

            modelBuilder.Entity("StudentskiDogodki.Pages.Karta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Cena")
                        .HasColumnType("REAL");

                    b.Property<int>("DogodekId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StKart")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DogodekId");

                    b.ToTable("Karte");
                });

            modelBuilder.Entity("StudentskiDogodki.Pages.Nakup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DogodekId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("KartaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PopustId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("stKart")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DogodekId");

                    b.HasIndex("KartaId");

                    b.HasIndex("PopustId");

                    b.ToTable("Nakupi");
                });

            modelBuilder.Entity("StudentskiDogodki.Pages.Popust", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Koda")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Procent")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Popusti");
                });

            modelBuilder.Entity("StudentskiDogodki.Pages.Rezervacija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DogodekId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("KartaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StKart")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UporabnikId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DogodekId");

                    b.HasIndex("KartaId");

                    b.HasIndex("UporabnikId");

                    b.ToTable("Rezervacije");
                });

            modelBuilder.Entity("StudentskiDogodki.Pages.Uporabnik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("DatumRojstva")
                        .HasColumnType("TEXT");

                    b.Property<string>("Geslo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Priimek")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Uporabniki");
                });

            modelBuilder.Entity("StudentskiDogodki.Pages.Fotografija", b =>
                {
                    b.HasOne("StudentskiDogodki.Pages.Dogodek", "Dogodek")
                        .WithMany()
                        .HasForeignKey("DogodekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dogodek");
                });

            modelBuilder.Entity("StudentskiDogodki.Pages.Karta", b =>
                {
                    b.HasOne("StudentskiDogodki.Pages.Dogodek", "Dogodek")
                        .WithMany()
                        .HasForeignKey("DogodekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dogodek");
                });

            modelBuilder.Entity("StudentskiDogodki.Pages.Nakup", b =>
                {
                    b.HasOne("StudentskiDogodki.Pages.Dogodek", "Dogodek")
                        .WithMany()
                        .HasForeignKey("DogodekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentskiDogodki.Pages.Karta", "Karta")
                        .WithMany()
                        .HasForeignKey("KartaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentskiDogodki.Pages.Popust", "Popust")
                        .WithMany()
                        .HasForeignKey("PopustId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dogodek");

                    b.Navigation("Karta");

                    b.Navigation("Popust");
                });

            modelBuilder.Entity("StudentskiDogodki.Pages.Rezervacija", b =>
                {
                    b.HasOne("StudentskiDogodki.Pages.Dogodek", "Dogodek")
                        .WithMany()
                        .HasForeignKey("DogodekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentskiDogodki.Pages.Karta", "Karta")
                        .WithMany()
                        .HasForeignKey("KartaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentskiDogodki.Pages.Uporabnik", "Uporabnik")
                        .WithMany()
                        .HasForeignKey("UporabnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dogodek");

                    b.Navigation("Karta");

                    b.Navigation("Uporabnik");
                });
#pragma warning restore 612, 618
        }
    }
}
